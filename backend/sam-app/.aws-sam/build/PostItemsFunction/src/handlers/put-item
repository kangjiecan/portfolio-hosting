import { DynamoDBClient } from '@aws-sdk/client-dynamodb';
import { DynamoDBDocumentClient, PutCommand } from '@aws-sdk/lib-dynamodb';

// Create DynamoDB client configuration
const dbConfig = {
    endpoint: 'http://dynamodb-local:8000',
    region: 'us-east-1',
    credentials: {
        accessKeyId: 'DUMMYIDEXAMPLE',
        secretAccessKey: 'DUMMYEXAMPLEKEY'
    }
};

// Log configuration before creating client
console.log('DynamoDB Configuration:', JSON.stringify(dbConfig, null, 2));

// Create DynamoDB client
const client = new DynamoDBClient(dbConfig);

// Create DocumentClient
const ddbDocClient = DynamoDBDocumentClient.from(client);
const tableName = process.env.DYNAMODB_TABLE_NAME;
console.log('Table Name:', tableName);

export const putItemHandler = async (event) => {
    try {
        // Log the incoming event
        console.log('Received event:', JSON.stringify(event, null, 2));

        if (event.httpMethod !== 'POST') {
            throw new Error(`postMethod only accepts POST method, you tried: ${event.httpMethod} method.`);
        }

        // Parse and log the request body
        const body = JSON.parse(event.body);
        console.log('Parsed body:', JSON.stringify(body, null, 2));

        const id = body.id;
        const name = body.name;

        // Log the DynamoDB operation parameters
        const params = {
            TableName: tableName,
            Item: { id: id, name: name }
        };
        console.log('DynamoDB params:', JSON.stringify(params, null, 2));

        // Try to verify table existence before operation
        console.log('Attempting to write to DynamoDB table:', tableName);
        console.log('Using endpoint:', dbConfig.endpoint);

        const data = await ddbDocClient.send(new PutCommand(params));
        console.log("Success - item added or updated:", JSON.stringify(data, null, 2));

        return {
            statusCode: 200,
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify({
                message: 'Item successfully added',
                item: body
            })
        };
    } catch (err) {
        console.error("Error details:", {
            message: err.message,
            code: err.code,
            statusCode: err.$metadata?.httpStatusCode,
            requestId: err.$metadata?.requestId,
            stack: err.stack
        });

        return {
            statusCode: 500,
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify({
                message: 'Internal server error',
                error: err.message,
                errorType: err.name
            })
        };
    }
};